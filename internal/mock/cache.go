// Code generated by MockGen. DO NOT EDIT.
// Source: order_service/internal/domain (interfaces: OrderCache)
//
// Generated by this command:
//
//	mockgen -package=mock order_service/internal/domain OrderCache
//

// Package mock is a generated GoMock package.
package mock

import (
	domain "order_service/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
	isgomock struct{}
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockOrderCache) GetOrder(orderUID string) (*domain.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderUID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderCacheMockRecorder) GetOrder(orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderCache)(nil).GetOrder), orderUID)
}

// SaveOrder mocks base method.
func (m *MockOrderCache) SaveOrder(orderUID string, order *domain.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveOrder", orderUID, order)
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderCacheMockRecorder) SaveOrder(orderUID, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderCache)(nil).SaveOrder), orderUID, order)
}
